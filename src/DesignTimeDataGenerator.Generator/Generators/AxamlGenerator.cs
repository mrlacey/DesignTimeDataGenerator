using System;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis.CSharp;

namespace DesignTimeDataGenerator.Generator
{
    [Generator]
    public class AxamlGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var additional = context.AdditionalTextsProvider
                .Where(at => at.Path.EndsWith(".axaml", StringComparison.OrdinalIgnoreCase));

            var info = additional.Select((at, ct) =>
            {
                var text = at.GetText(ct);
                var content = text?.ToString() ?? string.Empty;
                var lineCount = text?.Lines.Count ?? 0;
                var name = Path.GetFileNameWithoutExtension(at.Path);
                return new AxamlInfo(at.Path, name, content, lineCount);
            });

            context.RegisterSourceOutput(info, (spc, data) =>
            {
                var className = MakeIdentifier(data.Name);
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated />");
                sb.AppendLine($"// Source: {data.Path}");
                sb.AppendLine($"// Lines: {data.LineCount}");
                sb.AppendLine("using System;");
                sb.AppendLine();
                sb.AppendLine("namespace DesignTimeDataGenerator.Generated");
                sb.AppendLine("{");
                sb.AppendLine($"    public partial class {className}");
                sb.AppendLine("    {");
                sb.AppendLine("    }");
                sb.AppendLine("}");
                spc.AddSource($"{className}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            });
        }

        private static string MakeIdentifier(string name)
        {
            if (string.IsNullOrEmpty(name)) return "AxamlFile";
            var sb = new StringBuilder();
            if (!SyntaxFacts.IsIdentifierStartCharacter(name[0]))
                sb.Append('_');
            foreach (var ch in name)
            {
                sb.Append(SyntaxFacts.IsIdentifierPartCharacter(ch) ? ch : '_');
            }
            return sb.ToString();
        }

        private class AxamlInfo
        {
            public string Path { get; }
            public string Name { get; }
            public string Content { get; }
            public int LineCount { get; }

            public AxamlInfo(string path, string name, string content, int lineCount)
            {
                Path = path;
                Name = name;
                Content = content;
                LineCount = lineCount;
            }
        }
    }
}
